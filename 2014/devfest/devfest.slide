Go by Java example

Ernest Micklei
Software Architect, bol.com

* Learning Go 

- read a book :-(

* Learning Go 

- take the tour :-)

.link http://play.golang.org

* Learning Go 

- how do I ... in *Go*

- when you know how to do it in *Java*

* Strings

.play string_split.go /START OMIT/,/END OMIT/

* Regex

.play string_regex.go /START OMIT/,/END OMIT/

* Ordered collection

.play slice.go /START OMIT/,/END OMIT/

* Integer conversion

.play convert_atoi.go /START OMIT/,/END OMIT/

.play convert_itoa.go /START OMIT/,/END OMIT/

* No inheritance, struct embedding

.play inheritance_embed.go /START OMIT/,/END OMIT/

* Sorting

.play string_sort.go /START OMIT/,/END OMIT/

* Sorting your structs (1)

.code cities.go /START OMIT/,/END OMIT/



* Interfaces

An interface is a set of methods.
In Java:

	interface Switch {
	    void open();
	    void close();
	}

In Go:

	type OpenCloser interface {
	    Open()
	    Close()
	}

- Java interfaces are satisfied *explicitly*.
- Go interfaces are satisfied *implicitly*.

* If it looks like a duck...

If a type defines all the methods of an interface, then the type satisfies that interface.

Benefits:

- fewer dependencies

- easy to mock
	
* Mocking non-interface types of third-party package

- define your own interface with the methods you use

	type StoreAccess interface {
		Query(sql) (*pg.Rows, error)
		Exec(sql) error
	}

- use that interface in stead of the real thing

	func (d AccountDao) Accounts() ([]Account,error) {
		rows, err := d.access.Query("....")		
		...		
	}

- create a mock type with only that implementation		

	type MockedStoreAccess struct {}
	
	func (m MockedStoreAccess) Query(sql) (*pg.Rows, error) { ... }
	func (m MockedStoreAccess) Exec(sql) (error) { ... }


* Sort interface

	type Interface interface {	        
	        Len() int			
	        Less(i, j int) bool			
	        Swap(i, j int)
	}

* Sorting your structs (2)

.play custom_sort.go /START OMIT/,/END OMIT/

* Errors

Java has Exception classes

Go has error

	type error interface {
	    Error() string
	}

Idiomatic use

	func (d PersonDao) GetPersons() ([]Person,error) {
		//...
		return []Person{}, errors.New("connection failed")
	}
	
	persons, err := dao.GetPersons()
	if err != nil {
		log.Error("fetching persons failed:%v", err)
		return err
	}


* Reading line by line in standard Java 

.code file_read.java

* Reading line by line in Go

.play file_read.go /START OMIT/,/END OMIT/

* Concurrency
It is part of the language, not a library.

Based on two concepts:

- goroutines: lightweight, green threads
- channels: typed pipes used to communicate and synchronize between goroutines

Go runtime decides what OS threads will run which goroutines.

	fmt.Println(runtime.NumGoroutine())

* Multi-threading

.code runnable.java

* Goroutine

.play runnable.go /START OMIT/,/END OMIT/

* Practice Go

- learn the Go idiomatic way

- learn by reading well structured code 

- learn by doing

- Old habits...

* Go on

- JVM , https://code.google.com/p/jgo/

- Javascript, Tardis