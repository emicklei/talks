Go by Java example

Ernest Micklei
Software Architect, bol.com



* Learning Go 

- read a book :-(

* Learning Go 

- take the tour :-)

.link http://play.golang.org

* Learning Go 

- how do I ... in *Go*

- when you know how to do it in *Java*

.image img/DukeLetsGetGoing-148_180px.gif

* Strings

.play string_split.go /START OMIT/,/END OMIT/

* Regex

.play string_regex.go /START OMIT/,/END OMIT/

* Ordered collection

.play slice.go /START OMIT/,/END OMIT/

* Integer conversion

.play convert_atoi.go /START OMIT/,/END OMIT/

.play convert_itoa.go /START OMIT/,/END OMIT/

* No inheritance, struct embedding

.play inheritance_embed.go /START OMIT/,/END OMIT/

* Sorting

.play string_sort.go /START OMIT/,/END OMIT/

* Sorting your structs (1)

.code cities.go /START OMIT/,/END OMIT/

* Interfaces

An interface is a set of methods.
In Java:

	interface Switch {
	    void open();
	    void close();
	}

In Go:

	type OpenCloser interface {
	    Open()
	    Close()
	}

- Java interfaces are satisfied *explicitly*.
- Go interfaces are satisfied *implicitly*.

* If it looks like a duck...

If a type defines all the methods of an interface, then the type satisfies that interface.

Benefits:

- fewer dependencies

- easy to mock
	
.image img/gopher_calebdoxsey.png	
	
* Mocking non-interface types of third-party package

- define your own interface with the methods you use

	type StoreAccess interface {
		Query(sql) (*pg.Rows, error)
		Exec(sql) error
	}

- use that interface in stead of the real thing

	func (d AccountDao) Accounts() ([]Account,error) {
		rows, err := d.access.Query("....")		
		...		
	}

- create a mock type with only that implementation		

	type MockedStoreAccess struct {}
	
	func (m MockedStoreAccess) Query(sql) (*pg.Rows, error) { ... }
	func (m MockedStoreAccess) Exec(sql) (error) { ... }


* Sort interface

	type Interface interface {	        
	        Len() int			
	        Less(i, j int) bool			
	        Swap(i, j int)
	}

* Sorting your structs (2)

.play custom_sort.go /START OMIT/,/END OMIT/

* Errors

Java has Exception classes

Go has error

	type error interface {
	    Error() string
	}

.image img/gopher_roman.png

* Error handling

Idiomatic use

	func (d PersonDao) GetPersons() ([]Person,error) {
		//...
		return []Person{}, errors.New("connection failed")
	}
	
	persons, err := dao.GetPersons()
	if err != nil {
		log.Error("fetching persons failed:%v", err)
		return err
	}


* Reading line by line in standard Java 

.code file_read.java

* Reading line by line in Go

.play file_read.go /START OMIT/,/END OMIT/

* Http POST in standard Java

.code http_post.java

* Http POST in go

.play http_post.go  /START OMIT/,/END OMIT/

* Pointers

Go supports pointers, allowing you to pass references to values and records within your program.

.play pointer_receiver.go /START OMIT/,/END OMIT/


* Concurrency
It is part of the language, not a library.

Based on two concepts:

- goroutines: lightweight, green threads
- channels: typed pipes used to communicate and synchronize between goroutines

Go runtime decides what OS threads will run which goroutines.

.image img/gopher_parallel.jpg


* Multi-threading

.code runnable.java

* Goroutine

.play runnable.go /START OMIT/,/END OMIT/

* Go resources

Tour

.link http://tour.golang.org

Online books

.link http://www.miek.nl/downloads/Go/Learning-Go-latest.pdf
.link http://www.golang-book.com/

Examples

.link https://gobyexample.com/

Dave's list

.link http://dave.cheney.net/resources-for-new-go-programmers

* Practice Go

- learn the Go idiomatic way

- learn by reading well structured code 

- learn by doing

- Old habits...

* Reuse Java Best Practices?

Rethink

- no exception handling
- more flexibility in interfaces ; keep them small
- public,protected,private -> Exported
- concurrency is very cheap
- functions (methods) are first class

Keep

- separation of concerns
- organization in packages
- naming (types,functions,variables,parameters)


* Go on

- JVM , https://code.google.com/p/jgo/

- Javascript, Tardis

* Credits

The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)