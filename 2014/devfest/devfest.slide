Go by Java example

Ernest Micklei
Software Architect, bol.com

* About go

Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.

* Learning Go 

- reading a book ...

.image img/gopher_books.png

* Learning Go 

- take the tour ...

.link http://play.golang.org

- reading talks ...

.link http://talks.golang.org/

- watching videos ...

.link https://www.youtube.com/results?search_query=golang

* Learning Go 

- how do I ... in *Go*

- when you know how to do it in *Java*

.image img/DukeLetsGetGoing-148_180px.gif

* Strings

.play string_split.go /START OMIT/,/END OMIT/

* Regex

.play string_regex.go /START OMIT/,/END OMIT/

* Ordered collection

.play slice.go /START OMIT/,/END OMIT/

* Integer conversion

.play convert_atoi.go /START OMIT/,/END OMIT/

.play convert_itoa.go /START OMIT/,/END OMIT/

int, int16, int32, int64, uint8, uint16, uint32, uint64, uintptr

	var i int = 12
	j := (int32)i
	f := (float64)i


* No inheritance, struct embedding

Expressed in Go as unnamed fields in a struct.

It is still composition.

The fields and methods of the *embedded* type are defined on the *embedding* type.

.image img/gopher_plane.jpg

* Struct embedding

.play inheritance_embed.go /START OMIT/,/END OMIT/

* Decorating http.Request

.code decorate_request.go
	
Path parameter access

.code path_param.go
	
Request attributes

.code set_attr.go

	
* Sorting

.play string_sort.go /START OMIT/,/END OMIT/

* Sorting your structs (1)

.code cities.go /START OMIT/,/END OMIT/

* Interfaces

An interface is a set of methods.
In Java:

	interface Switch {
	    void open();
	    void close();
	}

In Go:

	type OpenCloser interface {
	    Open()
	    Close()
	}

- Java interfaces are satisfied *explicitly*.
- Go interfaces are satisfied *implicitly*.

* If it looks like a duck...

If a type defines all the methods of an interface, then the type *satisfies* that interface.

fmt.Stringer

	type Stringer interface {
		String() string 
	}

io.Writer

	type Writer interface {
		Write(p []byte) (int, error)
	}


.image img/gopher_swim.png	
	

* No Comparator, use Sort interface

	type Interface interface {	        
	        Len() int			
	        Less(i, j int) bool			
	        Swap(i, j int)
	}

in package sort 


	func Sort(data Interface)
	
and reverse	
	
	func Reverse(data Interface) Interface



.image img/gopher_sort.png

* Sorting your structs (2)

.play custom_sort.go /START OMIT/,/END OMIT/

* Errors

Java has Exception classes

Go has error

	type error interface {
	    Error() string
	}

.image img/gopher_roman.png

* Error handling

Idiomatic use

	func (d PersonDao) GetPersons() ([]Person,error) {
		//...
		return []Person{}, errors.New("connection failed")
	}
	
	persons, err := dao.GetPersons()
	if err != nil {
		log.Error("fetching persons failed:%v", err)
		return err
	}


* Reading line by line in standard Java 

.code file_read.java

* Reading line by line in Go

.play file_read.go /START OMIT/,/END OMIT/

* Http POST in standard Java

.code http_post.java

* Http POST in go

.play http_post.go  /START OMIT/,/END OMIT/

* Http POST in go (detailed)

.play http_post2.go  /START OMIT/,/END OMIT/

* Pointers

Go supports pointers, allowing you to pass references to values and records within your program.

.image img/gopher_partyhat.webp

Variables

- & = take the address of a value

- * = dereference a pointer, an address to a value

Functions

- * = method requires pointer type

* Counter

.play pointer_receiver.go /START OMIT/,/END OMIT/


* Concurrency
It is part of the language, not a library.

Based on two concepts:

- goroutines: lightweight, green threads
- channels: typed pipes used to communicate and synchronize between goroutines

Go runtime decides what OS threads will run which goroutines.

.image img/gopher_parallel.jpg


* Multi-threading

.code runnable.java

* Goroutine

.play runnable.go /START OMIT/,/END OMIT/

* Third party packages

.link http://godoc.org/

.play third_party.go


* Go resources

Tour

.link http://tour.golang.org

Online books

.link http://www.miek.nl/downloads/Go/Learning-Go-latest.pdf
.link http://www.golang-book.com/

Examples

.link https://gobyexample.com/

Dave's list

.link http://dave.cheney.net/resources-for-new-go-programmers

More talks

.link http://talks.golang.org/


* Reuse Java Best Practices?

Rethink

- no exception handling
- more flexibility in interfaces ; keep them small
- public,protected,private -> Exported
- concurrency is very cheap
- functions (methods) are first class

Keep

- separation of concerns
- organization in packages
- naming (types,functions,variables,parameters)


* Go on

Compilers standard available

- Linux, FreeBSD, OSX, Windows
- Ports: ARM, PowerPC, NaCl

JVM

.link https://code.google.com/p/jgo/ JGo

Android

.link https://github.com/remogatto/mandala Mandala ? 1.4 !

Javascript

.link http://tardisgo.github.io Tardis
 

* Credits

The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)

Francesc Campoy, Gopher and Developer Advocate