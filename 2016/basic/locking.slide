T

* Synchronization

- Locking to protect against concurrent access
- "Fork & Join" pattern

.link https://golang.org/pkg/sync/
	
	Mutex
	Pool
	WaitGroup

* Example: Sequence

.play -edit sequence.go 	 /START OMIT/,/END OMIT/

* Example: Sequence (struct embedding)

.play -edit sequence2.go 	 /START OMIT/,/END OMIT/
	
* Example: WaitGroup

.play -edit waitgroup.go 	 /START OMIT/,/END OMIT/
	
* Exercise: ConcurrentHashMap

Define an interface for the operations Put and Get

- the key will be a string
- the value is a time.

Create a thread-safe implementation of a map

* Solution: ConcurrentHashMap

.code locking.go /START OMIT/,/END OMIT/

* Solution: ConcurrentHashMap (part 2)

.play -edit locking2.go /START OMIT/,/END OMIT/

