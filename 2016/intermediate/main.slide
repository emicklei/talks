Go - Intermediate Training

Ernest Micklei
Software Artist
*golangmasters.com*

* Who am i

- using Go since 2011
- co-organizer Golang Meetup Amsterdam
- author of *go-restful*, *hopwatch*, *forest*, *zazkia*, *assert*, *artreyu*
- bol.com: *Daxy* , *Kevlar*, *BoQS* , *Guardian*

.image img/gopher_teacher.png _ 300


* Goal

- goroutines and channels
- working with http and JSON
- error handling , logging
- vendoring (if time permitted)

.image img/dubai.png _ 300

	
* Format per Topic

- Theory or Example
- Excercise
- Solution

.image img/triplet.jpg _ 300
* Goroutines and Channels

.image img/sayhi.jpg

* Features 

A goroutine is a lightweight thread managed by the Go runtime.

	go seeTheDoctor(now)

- cannot stop explicitly (or check if running)
- cannot schedule
- no guarantee when to start
- no ordering
- does not block program exit
- can be locked to thread (e.g. UI)


* Argument evaluation

.play -edit argument_evaluation.go

* Communicating routines

Channels exist to facilitate inter-goroutine communication

.play -edit wait_until_done1.go

* Send and receive over a channel

Buffer

	buf := make(chan int, 2)

Send v to channel myChan.

	myChan <- v

Receive from myChan, and assign value to v.

	v := <- myChan

* Channel close

Closing a channel

	close(myChan)

Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.

Receivers can test whether a channel has been closed

	v, ok := <- myChan

Receives values from the channel repeatedly until it is closed.

 	for each := range myChan {
		...
	}

* Select example

.play -edit timeout.go  /START OMIT/,/END OMIT/ 

* Sequence example

.play -edit sequence.go

* Problem

Write a program that computes 10 factorial numbers, each number in a different goroutine

* Solution

.play -edit concurrent_factorial.go   /START OMIT/,/END OMIT/ 




* JSON over HTTP

.image img/with_champagne.jpg _ 400

* Problem

Create a HTTP server on port 8080 that responds with "gopher says hi" for the request GET /hi

- Use package http://golang.org/pkg/net/http/

* Solution

.code empty_service.go


* Problem

Adjust your HTTP server to accept a JSON representation of an Address value, log it and return it.

	type Address struct {
		Postalcode  string
		HouseNumber int
		Street      string
		City        string
		Country     string
	}

Make the operation available using this REST operation:


	POST /v1/addresses

To test your service

	curl -v -H POST http://localhost:8080/v1/addresses -d "{\"country\":\"NL\", \"house-number\":42}"


* Solution

.play -edit address_json.go  /START OMIT/,/END OMIT/ 
* Error handling

.image img/barbapappa.jpg

* The interface

The error built-in interface type is the conventional interface for representing an error condition, with the nil value representing no error.

	type error interface {
		Error() string
	}

Use "err" to name an error

	if err := os.Open("future"); err != nil {
		log.Fatal("cannot read the future",err)
	}

Put error return type at the end

	func FetchOrderHistory(account Account) ([]Order, error ) {...}

Always check the error

* Custom error type

	type AppError struct {
		Code           int    `json:"code"`
		Message        string `json:"message"`
		httpStatusCode int
	}
	
	func (r AppError) HttpStatusCode() int { return r.httpStatusCode }
	
	func (r AppError) Error() string {
		return fmt.Sprintf("BoQS-%d:%s", r.Code, r.Message)
	}
	
* Use AppError
	
	var ErrInvalidTopicName = NewAppError(
				Code: 1003,
				Message: "topic name is invalid (must be non-empty and max 50), got %v",
				http.StatusBadRequest)
	
	func checkTopicName(name string) error {
		if len(name) > 50 {
			return ErrInvalidTopicName.WithArgs(name)
		}
		return nil // no error
	}
	
* Custom handling 


.code custom_error_handling.go /START OMIT/,/END OMIT/ 
	
	
* TracingError

	type TracingError struct {
		cause     error
		callTrace []tracePoint
	}
	
Collects stack information and logging context.	


	tre.New(err, "your message", "paramName", paramValue)
	
* Using TracingError

.play -edit tracing_error.go  /START OMIT/,/END OMIT/ 

package github.com/emicklei/tre


* Problem

Write a copy program that reads the contents of one file and writes it to another

* Solution

	func main() {
		if len(os.Args) != 3 {
			println("Usage copy <from> <to>")
			return
		}
		if err := copyFile(os.Args[1], os.Args[2]); err != nil {
			log.Println("problem copying file", err)
		}
	}

* Solution (part 2)

.code copy.go   /START OMIT/,/END OMIT/ 


	

	
	
* Problem

Concurrency fetch all tags of all public github repositories of a given user (e.g. bolcom)

* Get repositories for user

.code crawl_github.go  /START OMIT/,/END OMIT/ 

* Get tags for repository

.code crawl_github.go  /START OMIT2/,/END OMIT2/ 

* Sequential version

.code crawl_github.go  /START OMIT3/,/END OMIT3/ 
* Reading material


Concurrency
.link http://talks.golang.org/2012/concurrency.slide#1
.link http://vimeo.com/49718712

Errors
.link http://blog.golang.org/error-handling-and-go
.link http://golang.org/doc/effective_go.html#errors

HTTP
.link https://blog.golang.org/http-tracing
.link https://github.com/davecheney/httpstat

JSON
.link https://blog.golang.org/json-and-go
.link https://gobyexample.com/json

* Practice Go

- learn the Go idiomatic way

- learn by reading well structured code 

- learn by doing


.image img/triplet.jpg _ 300

The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
All images are copyrighted to their respective owners. 

