* Goroutines and Channels

.image img/sayhi.jpg

* Features 

A goroutine is a lightweight thread managed by the Go runtime.

	go seeTheDoctor(now)

- cannot stop explicitly (or check if running)
- cannot schedule
- no guarantee when to start
- no ordering
- does not block program exit
- can be locked to thread (e.g. UI)


* Argument evaluation

.play -edit argument_evaluation.go

* Communicating routines

Channels exist to facilitate inter-goroutine communication

.play -edit wait_until_done1.go

* Send and receive over a channel

Buffer

	buf := make(chan int, 2)

Send v to channel myChan.

	myChan <- v

Receive from myChan, and assign value to v.

	v := <- myChan

* Channel close

Closing a channel

	close(myChan)

Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.

Receivers can test whether a channel has been closed

	v, ok := <- myChan

Receives values from the channel repeatedly until it is closed.

 	for each := range myChan {
		...
	}

* Select example

.play -edit timeout.go  /START OMIT/,/END OMIT/ 

* Sequence example

.play -edit sequence.go

* Problem

Write a program that computes 10 factorial numbers, each number in a different goroutine

* Solution

.play -edit concurrent_factorial.go   /START OMIT/,/END OMIT/ 




