Hazana, performance testing gRPC

Ernest Micklei
Software Artist, kramphub.com

* Who am i

- using Go since 2011
- co-organizer Golang Meetup Amsterdam
- author of *go-restful*, *hopwatch*, *forest*, *zazkia*, *assert*, *artreyu*, *proto*, ...


.image img/emicklei_hackers_logo.png _ 300
* Agenda

- gRPC
- load profile
- using the Hazana package
- demo
- inside Hazana
- deploy

(28 slides)
* gRPC.io

- gRPC is based around the idea of defining a service, specifying the methods that can be called remotely with their parameters and return types

- uses HTTP/2 for transport

- uses ProtocolBuffers as the interface description language

- cross-platform client and server bindings for many languages

.image img/grpc_io.png
* .proto file

.code clock.proto
* gRPC clock server

Using the generated functions and types to implement a *ClockService*
.code server.go /START OMIT/,/END OMIT/
* gRPC clock client

Using the generated functions and types to call *GetTime*

.code client.go
* ideal vs actual load profile

.image img/hazana_pics_actual.png
* Load profile

- load is created by sending requests repeatedly

- measure performance to control rampup

- measure performance to report attack
* Rampup

- service lazy initialization
- DNS lookups
- creating connection pools
- TLS negociation
- JVM class loading
* Go package

( logo wanted... )

.image img/hazana_logo.png 300 _
* Attack interface

.code attack_interface.go
* performance tester program

.code loadrun.go /START OMIT/,/END OMIT/
* performance tester program

.code loadrun_main.go
* Demo
* Hazana responsiblities

- config
- *rampup*
- *attack*
- report
* Configuration

- flags

    go run *.go -v -rps 150 -attack 1800 -ramp -60 -max 20

- JSON

    hazana.ConfigFromFile("config.json")

    {
        "RPS": 150,
        "AttackTimeSec": 1800,
        "RampupTimeSec": 60,
        "MaxAttackers": 20,
        "Verbose": true,
        "OutputFilename": "report.json",
        "Metadata": {
            "project_id": "my-google-project",
            "log_name": "my-service-load-test-log",
            "metric.type": "custom.googleapis.com/my-service/load/v1",
            "grpc_endpoint": "x.y.z.i:443"
        }
    }
* Driving the load to the service

.image img/token_flow.png
* attack loop

.code attack.go
* hazana load profile

.image img/hazana_pics_rampup.png
* Rampup second

.code rampup.go

* goroutines profile

.image img/hazana_pics_goroutines.png
* Rampup strategy

How to set and change the number of goroutines to meet the increasing requests per second.

- linear
- exp2
* Rampup strategy linear

Increase the goroutines linearly to the maximum number set.

.code linear.go
* Rampup strategy exp2

Increase the number of goroutines based on the ratio of the actual and measured rate.

.code exp2.go
* Scheduling performance tests on Google Cloud Platform

- leverage on demand CPU capacity
- run inside Docker container 
- schedule using Google Container Engine (Kubernetes)
* Docker

- create general purpose load test image

    FROM golang:1.9.0

    COPY doit.sh /doit.sh

    CMD ["/doit.sh"]

- script to fetch and run load test sources

    # fetch load test source code
    cd /go/src
    mkdir -p company.com
    cd company.com
    git clone https://${BB_USR}:${BB_PWD}@bitbucket.org/company/${BB_REPO}.git
    cd ${BB_REPO}

    # kick it
    go run *.go
* Run Docker

    docker run -it \
        -e BB_USR=my-user \
        -e BB_PWD=my-pwd \
        -e BB_REPO=my-load-test \
        -e HAZANA_CONFIG=staging-external.json \
        -e REPORT_FILE=report.json \
        my-registry/hazana-load-runner:0.3

or using Kubernetes CronJob to schedule the tests

    apiVersion: batch/v2alpha1
    kind: CronJob
    metadata:
    name: myservice-load-runner
    spec:
    # https://crontab.guru/#0_*_*_*_*
    schedule: "0 * * * *"
    jobTemplate:
        spec:
        template:
        ....stuff deleted....
* Wrap up

- Go package for building performance test programs
- Requires implementing the Attack interface
- Can be used for gRPC, HTTP(s), TCP, ...
- Configurable load and rampup profile

TODO

- collecting bytes transferred
- realtime metrics to dashboard
- other rampup strategies?
