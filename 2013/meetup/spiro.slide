Spiro Graphics

Ernest Micklei
Golang Amsterdam, November 2013


* Goal

 - Create spirograph images

 - Displayed using SVG

 - Served by Go to a Browser


.image spirograph.jpg

 
* How ?

 - Step 0 .. Step 9

 - Solution after each! Step
 
 - Alone or by pair-programming 


* Step 0

Make a program that starts a HTTP server listing on port 7777.

Add a HTTP request handler for the URL path "/spiro".

The handler must respond with the string "spiro".

Hints:

.link http://golang.org/pkg/net/http/

* Solution 0

.code step0.go

* Step 1

Change the handler function to return a minimal SVG document.

Set the response content type header to "image/svg+xml".

Use the following SVG document:

	<?xml version="1.0" standalone="no"?>
	<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
	<circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red" />
	</svg>

.image step1.png

Hint:

- Use a multi-line string package variable
	
* Solution 1

.code step1.go  /START OMIT/,/END OMIT/


* Step 2

Replace the SVG document by functions calls using the SVGO package.

	go get github.com/ajstarks/svgo
	
.link https://github.com/ajstarks/svgo

Hint:

- Explore the README

* Solution 2

.code step2.go /START OMIT/,/END OMIT/

* Step 3

Learn about the Spirograph

.link http://en.wikipedia.org/wiki/Spirograph
.image resonance_cascade.png


* Step 4

.image spirograph_formula.png

	t = positive angle in radians	
	r = radius of small inner circle
	ρ = offset within small inner circle
	R = radius of large outer circle
	
where:
	
	k = r / R
	l = ρ / r
	
Write the function that computes a point using the float64 parameters t, r, offset and R

Hint:

.link http://golang.org/pkg/math/

* Solution 4

.code step4.go  /START OMIT/,/END OMIT/

* Step 5

Write a basic test that computes and prints the coordinates (x,y) for the angles 

	t = [0..360] degrees
	r = 10
	R = 100
	offset = 2

* Solution 5

.code step5_test.go  /START OMIT/,/END OMIT/
	
* Step 6

Back to the SVG server program, change it such that it displays a blue Polyline with a few coordinates to test it.

.image step6.png

Hint:

.link https://github.com/ajstarks/svgo

* Solution 6

.code step6.go  /START OMIT/,/END OMIT/
		
* Step 7

Define the type *Spiro* to hold information for computing coordinates.

	type Spiro struct {
		revolutions int 		// how many times to rotate the inner circle
		angleDelta  float64     // degrees between each point on a spiro graph line
		innerRadius float64
		outerRadius float64
		innerOffset float64
	}
	
* Step 8

Write the function to compute x and y coordinates using the parameters:

	xc = x-coordinate of the center to display the spirograph
	yc = x-coordinate of the center to display the spirograph

The function must return two slices

	func (s Spiro) computeCoordinates(xc int, yc int) (xcoords []int, ycoords []int) { ... }		
	
	
Hint:

- revolutions * 360

* Solution 8 

.code step8.go   /START OMIT/,/END OMIT/

* Step 9

Change the spiroHandler function such that it calls the computeCoordinates to get the coordinates for the Polyline.

Use the following spiro:

	spiro := Spiro{
		revolutions: 4,
		angleDelta:  5,
		innerRadius: 30,
		outerRadius: 200,
		innerOffset: 20,
	}
	
* Solution 9

.code step9.go   /START OMIT/,/END OMIT/
	
	
* Step 10

Change the spiroHandler function such that the Spiro initialization parameters are taken from URL query parameters.

Example:

	/spiro?rev=3&delta=2&inner=30&outer=200&offset=45
	
Hints

.link http://golang.org/pkg/net/url
.link http://golang.org/pkg/strconv

* Solution 10

.code step10.go   /START OMIT/,/END OMIT/


* Have fun 

.image spiro_sample1.png
.image spiro_sample2.png
