about Go
a modern systems programming language

Ernest Micklei
Software Architect, bol.com


* Go History

- 2007: Design started

- 2008: Implementation started

- 2009: Open Sourced

- 2012: Release 1.0 in March

- Now:  Release candidate 1.2

- Robert Griesemer, Ken Thompson, Rob Pike, Ian Lance Taylor, Russ Cox, many others




* Goal

- Make the language fast

- Make the tools fast


.image golang-org.webp


* Go Syntax

.play simple_syntax.go




* Go Concurrency

.play single_thread.go




* Go Concurrency

.play concurrency.go /START OMIT/,/END OMIT/




* Go language features you miss?

- no inheritance
- no exceptions (return error for inspection)
- no generics (yet)
- no tenary if operator (true ? 1 : 0)




* Go language features

- goroutines and channels
- slices, maps
- interfaces
- methods
- reflection
- C friendly




* Go methods

.play method-example.go /START OMIT/,/END OMIT/





* Go and C

Cgo lets Go packages call C code. 

.link http://blog.golang.org/c-go-cgo

.play cgo-example.go





* Go XML codec

.play reflection.go




* Go values and pointers

- Function parameters ALWAYS passed by value + can only return value(s)

- Use pointer receiver in methods to modify state
	
.play pointer_receiver.go /START OMIT/,/END OMIT/




* Go Ecosystem

- A language is useless without a rich standard library
- ... without tools
- ... without documentation
- ... without community support




* Lots of standard packages
	
.link http://golang.org/pkg/		
				
.image go-packages-snapshot.png	





* Go tools

- Fetch external packages

	go get github.com/emicklei/hopwatch

- Souce code formatting

	go fmt

- No build scripts needed

	go install

- Run all tests

	go test
	
- Run directly from source

	go run backup.go	




* Go tests

.play test-example.go /START OMIT/,/END OMIT/
	





* Go Doc

Godoc is the Go documentation tool. 
It reads documentation directly from Go source files. 

.link http://godoc.org/github.com/SlyMarbo/rss

.image godoc-org-snapshot.png




* Go Wiki

The goal is to write small, focused reference/summary articles on individual topics of the language.

.link https://code.google.com/p/go-wiki/wiki/SliceTricks

.image go-wiki-snapshot.png




* Go Playground

The service receives a Go program, compiles, links, and runs the program inside a sandbox, then returns the output.

.link http://play.golang.org

.image go-playground-snapshot.png






* Finding open-source Go packages

.link http://godoc.org
.link http://gowalker.org/

- crawls Bitbucket, Github, Google Code, Launchpad and Git @ OSC.

	go get code.google.com/p/goprotobuf





* What I like about Go

- Simple rules for syntax

- Feels like scripting language, runs like C

- Fast execution and cross-platform

- Rich set of standard packages

- Dead simple integration with C libraries

- Tools 





* What I work on

- Web Services  (go-restful)

- Complex "shell" scripts

- Tools (debugger, REPL)

- Realtime message processing







* Go and explore

- Where to start ?

.link http://golang.org
.link https://groups.google.com/forum/#!forum/golang-nuts go-nuts forum