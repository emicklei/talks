about Go
a modern systems programming language

Ernest Micklei
Software Architect, bol.com

* Google Go

I am exited about this language
How can I make you share a piece of that excitement
A language is just a set of notations (syntax) and defined behavior (specification)
Much easier to talk about some next generation game engine, NoSQL database or other Bigdata topic

I can go through all the language specifics but it will not excite you.
Instead, it may confuse you and in the worse case, you decide to skip this one

So what to do?  

If there is one feature you must have seen than it should be its builtin concurrency support.

Another thing I realized is that Go excites me because working in it makes me more productive
More productive compared to what? and why?
This can be personal although it has been reported elsewhere too.






* Lots of standard packages
	
.link http://golang.org/pkg/		
				
.image go-packages-snapshot.png	

* ?

- C,C++ like performance

- Souce code formatting

	go fmt

- No build scripts needed

	go install




* Go Syntax

.play simple_syntax.go

* Go Concurrency

.play single_thread.go

* Go Concurrency

.play concurrency.go /START OMIT/,/END OMIT/

* Documentation generation




build the right intuition about which operations are expensive and which are not - Russ Cox

creating a substring is very efficient

you never learn any programming language for real unless itâ€™s used to build a fairly large, real-world solution.


* Go packages


- Standard packages

	import "encoding/xml"
	
- External packages

	import "github.com/emicklei/go-restful"
	
- Install external packages
	
	go get github.com/emicklei/go-restful


* Testing

	import "testing"
	
	
Write a test	
	
	func TestSeven(t *testing) {
		seven := 3 + 4
		if seven != 7 {
			t.Fatalf("unexpected:%d", seven)
		}
	}
	
Run all tests

	go test
				
	PASS
	ok  	github.com/emicklei/renderbee	0.039s							
	

* More test tools

- Test Coverage

	go test -cover
	
- Benchmark testing

	func BenchmarkMyFastAlgorithm(b *testing.B) {
		// use the fast algoritm
	}
- and see the results
		
	BenchmarkMyFastAlgorithm    10000000    282 ns/op	

* CPU and memory profiling	

- Insert profiling instructions

   f, _ := os.Create("myalgorithm.pprof")
   pprof.StartCPUProfile(f)
   defer pprof.StopCPUProfile()		
							
- After program exit, run pprof

	go tool pprof myprogram myalgorithm.pprof

	(pprof) top10
	Total: 2525 samples
	     298  11.8%  11.8%      345  13.7% runtime.mapaccess1_fast64
	     268  10.6%  22.4%     2124  84.1% main.FindLoops
	     251   9.9%  32.4%      451  17.9% scanblock
	     178   7.0%  39.4%      351  13.9% hash_insert


* Compilation

- package (reusable library with a namespace)
- command (command line programs)




* Go values and pointers

- Function parameters ALWAYS passed by value + can only return value(s)

- Use pointer receiver in methods to modify state
	
	
.play pointer_receiver.go /START OMIT/,/END OMIT/


* Language features

- compiler infer types
- simple rule for package visibility: Upcase names
- goroutines and channels


* Language features

- not object-oriented
- no inheritance (use composition)
- no exceptions (return error for inspection)
- no generics (yet)
- no tenary if operator (true ? 1 : 0)





* Go Ecosystem

- A language is useless without a standard library
- A language is useless without tools
- A language is useless without documentation
- A language is useless without a community


* Go Doc

Godoc is the Go documentation tool. 
It reads documentation directly from Go source files. 

.link http://godoc.org/github.com/SlyMarbo/rss

.image godoc-org-snapshot.png

* Go Wiki

The goal is to write small, focused reference/summary articles on individual topics of the language.

.link https://code.google.com/p/go-wiki/wiki/SliceTricks

.image go-wiki-snapshot.png


* Go Playground

The service receives a Go program, compiles, links, and runs the program inside a sandbox, then returns the output.

.link http://play.golang.org

.image go-playground-snapshot.png


* Go and C

Cgo lets Go packages call C code. 

.link http://blog.golang.org/c-go-cgo

.play cgo-example.go

* Go XML codec

.play reflection.go


* Easy to find open-source packages

.link http://godoc.org
.link http://gowalker.org/

- crawls Bitbucket, Github, Google Code, Launchpad and Git @ OSC.

	go get code.google.com/p/goprotobuf

* Things about Go that brings me back the fun

- Simple rules for syntax

- Fast compilation and smart about types

- Fast execution and cross-platform buildable

- Lots of standard packages

- Dead simple integration with C libraries

- Tools to supports development proces