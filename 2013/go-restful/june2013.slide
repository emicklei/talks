go-restful
package for building REST webservices

Ernest Micklei
Software Architect, bol.com

http://github.com/emicklei/go-restful

* REST

*identification* of Resources

	http://order.services.bol.com/v1/orders/1234

and *manipulation* of Resources

	POST	 /customers/12345/orders
	
through *representations* of Resources

	{ "Order" : { "Items" : [...] }}	
	
using HTTP methods
		
	GET,POST,PUT,DELETE,HEAD

* Wanted 

.image landskape-api-swagger.png

* Request handling in net/http

.code handfunc.go

- "/bar" cannot be a regular expression (or parameterized)

- need to inspect request for HTTP Method

- ... for URL path and query

- no content negotiation (Accept, Content-Type)

* Routing

A Route binds an HTTP request template to a function.

  GET /customers/{customer_id}/orders =>  getOrdersForCustomer(...)
  POST /customers/{customer_id}/orders =>  addOrderForCustomer(...)

A Route dispatches an incoming HTTP request to a function call.

A Route is a combination of URL path, Http method and MIME types.
	
A collection of Routes for the same resource type is modelled by a WebService.

.image service_route_func.png

* Routes in go-restful

.code orderresource_1.go

* Route function , a magical way

.code function_magic.go

- Route needs to determine parameter values (query?, path?)
- Route needs to marshall the return value (errors?)
- No way to access Http Headers (get from request? set for response?)
- No control over Http status (BadRequest, NoContent, Conflict...)

too much magic, much less control


* Route functions in go-restful
 
 GET /customers/{customer_id}/orders

.code orderresource_2.go

* RouteFunction

In general, functions in a Route must be of:

 type RouteFunction func(*restful.Request, *restful.Response)

* Hello world

.play ../examples/restful-hello-world.go

* Request in go-restful

- A wrapper on the standard http.Request
- Providing convenience methods

 PathParameter(name string) string

 QueryParameter(name string) string

 ReadEntity(entityReference interface{}) error

Use embedded Request for Header access

 req.Request.Header.Get("Date")

* ReadEntity

ReadEntity uses standard Unmarshalling (XML, JSON) depending on Accept HTTP header.

 order := new(Order)
 err := req.ReadEntity(order)

* Response in go-restful

- A wrapper on the standard http.ResponseWriter
- Providing convenience methods

 AddHeader(header string, value string) Response

 WriteError(httpStatus int, err error) Response

 WriteEntity(value interface{}) Response

* WriteEntity

WriteEntity uses standard Marshalling (XML, JSON) depending on the Content-Type defined by the Route.

 resp.WriteEntity(order)

If the Write fails then status 500 is written instead

* MIME types

 Accept: application/xml ; application/json

 Content-Type: application/json

 Content-Type: application/xml

* MIME types in go-restful

 yourService.Consumes(restful.MIME_XML, restful.MIME_JSON)
 yourService.Produces(restful.MIME_JSON, restful.MIME_XML)

You can specify this per Route as well.

You can add your own, e.g application/octet-stream for Google Protocol Buffers and use

 func ReadRequest(b *bufio.Reader) (req *Request, err error)

* Filters

Intercept a request or response to add cross concern behavior

- logging
- authorization, authentication
- metrics
- HTTP headers

* Filter types

- Global

- WebService

- Route

Filters must have signature

 type FilterFunction func(*Request, *Response, *FilterChain)

* Global filters in go-restful

 func logMethodAndUrl(req *restful.Request, resp *restful.Response, chain *restful.FilterChain) {
 	log.Printf("%s,%s\n", req.Request.Method, req.Request.URL)
 	chain.ProcessFilter(req, resp)
 }

To install

 restful.Filter(logMethodAndUrl)

* WebService filters in go-restful

To install

 myOrderService.Filter(logMethodAndUrl)

* Route filters in go-restful

 myOrderService.Route(ws.GET("/customers/{customer_id}/orders").Filter(logMethodAndUrl)

Filters can be chained

 .Filter(logMethodAndUrl).Filter(countHits).Filter(basicAuthorize).Filter(measureTime)

* Documenting the API

- Webservice without API documentation is useless
- Document each operation, each parameter (path,query,body), each return value
- Source comment is not enough
- Expose API document by the service itself

* API for documenting the API

.code orderresource_3.go

* Using Swagger UI

.image order_api_swagger.png

* Landskape

.code landskape.go

* Landskape API

.image landskape-api-swagger.png

* Go get some

.play landskape_client.go 

* Program structure

 /webservice
   connection_resource.go
   system_resource.go
   diagram_service.go

 /application
   logic.go

 /model
   connection.go
   system.go  

 /dao
   connection_dao.go
   system_dao.go 

* Inject the components

 appDao := dao.SystemDao{session.DB(props["mongo.database"]).C("systems")}
 conDao := dao.ConnectionDao{session.DB(props["mongo.database"]).C("connections")}
 
 logic := application.Logic{appDao, conDao}
 
 webservice.SystemResource{logic}.Register()
 webservice.ConnectionResource{logic}.Register()


* go-restful

- Dispatches incoming Http Requests to functions using Routes
- *Route* encapsulates Http Method, URL template and MIME type
- *WebService* is logical composition of Routes sharing e.g. a common root path
- *ReadEntity* and *WriteEntity* are convenience methods to transport resources
- *Filters* intercept Http Request to perform cross concern behavior
- Route can be fully documented such that it can expose an API document
- Subpackage "swagger" provides a WebService to use the *Swagger* *UI*