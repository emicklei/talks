About Go Modules
November 2019

Ernest Micklei
Software Artist, kramphub.com

* Who am i

- using Go since 2011
- co-organizer Golang Meetup Amsterdam
- *go-restful*, *proto*, *forest*, *zazkia*, *parzello*, *gmig*, *kiya*, ...
- Google Developer Expert (Go & GCP)

.image img/emicklei_hackers_logo.png _ 300

* Bits of History

* Bits of History

Once upon a time, your programs always had to use the *latest* *greatest* dependent packages

or whatever commit | branch | tag you had locally

And there was GOPATH ...

* GOPATH example

.image img/gopath_pkg.png _ 700
echo $GOPATH
/Users/emicklei/go

* GOPATH example: go-spew

.image img/gopath_spew.png _ 700

~/go/src/github.com/davecgh/go-spew

* Bits of History

And live was good ...

Until it wasn't !

* Bits of History

Then with Go version 1.5 came *Vendoring*

An idea which I saw first being applied in *Ruby* *on* *Rails*

Now we can freeze all the code (and make local changes)

 GO15VENDOREXPERIMENT=1

default since 1.6

* Vendor example

.image img/kiya_vendor.png _ 500

* Bits of History

And live was good ...

Until it wasn't !

* Bits of History

Then with Go 1.11 came *Go* *Modules*

_Dependency_ _done_ _right_

(for a while we had the vgo experiment)

    GO111MODULE=auto

* Go Modules

* Module

is a way to group together a set of packages and give it a version number to mark itâ€™s state at a specific point in time

    Modules record precise dependency requirements and create reproducible builds.

So modules need unqiue identifiers

    Modules use Semantic Versioning

* Semantic Versioning

Given a version number MAJOR.MINOR.PATCH, increment the:

- MAJOR version when you make incompatible API changes,
- MINOR version when you add functionality in a backwards compatible manner, and
- PATCH version when you make backwards compatible bug fixes.

.link https://semver.org/

* Minimal Version Selection (MVS)


MVS ensure that the library versions I compile with today will be the same versions that my co-maintainer compiles with tomorrow

    your go.mod says use v1.2

    author just released v1.2.1

    author later releases v1.3


MVS does not automatically update minor version you will need to pay attention to bug and security point releases for your dependencies.

* Semantic Import Versioning

Semantic Import Versioning locks a dependency to a major version you will need to be aware of new major version releases and upgrade when you want the new functionality they offer.

    import "github.com/me/foobar/v3"

Then the Go tooling will look for:

    v3.*.* tags in repository github.com/me/foobar

or 
    
    /v3 subdirectory of repository github.com/me/foobar

* Vendor your Modules

    go mod vendor

Copies sources of the versions according to go.mod into /vendor folder (without git metadata)

* Modulizing go-restful

* go-restful

package for building REST-style Web Services using Go.

One of my last packages that do not have a *go.mod*.

Latest git tag is *v2.11.1* and is not adapted to Go Modules.

Recommendation:

    Start with next major version for Module support

* go-restful considerations

Follow Go team recommendation to add */v3* folder with copy of sources ?

Process *deprecated* warnings when moving to v3 ?

How many projects are still on the GOPATH because of its age ?

.link https://github.com/emicklei/go-restful/issues/374

* go-restful

    If the module is version v2 or higher
    then major version of the module must be included as a /vN 
    at the end of the module paths used in go.mod files

In the sources folder

    go mod init github.com/emicklei/go-restful/v3 

Creates a go.mod    

    module github.com/emicklei/go-restful/v3

    go 1.13

* go-restful

    module github.com/emicklei/go-restful/v3

    go 1.13

Options

- Major Branch v3
- Major Subdirectory /v3
- Release v3 on master branch    

* go-restful

Before release v3

- create a branch v3 to merge into master 
- add go.mod
- update CHANGES.md
- do NOT include breaking changes (despite it is a major version upgrade)
- update README.md to describe how consumers can migrate

After release v3

- update my own consumers

* Credits

Information has been collected from

.link https://github.com/golang/go/wiki/Modules#quick-start
.link https://ukiahsmith.com/blog/a-gentle-introduction-to-golang-modules/
.link https://github.com/kramphub/kiya
.link https://github.com/emicklei/go-restful
