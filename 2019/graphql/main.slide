About a GraphQL server in Go
September 2019

Ernest Micklei
Software Artist, kramphub.com

* Who am i

- using Go since 2011
- co-organizer Golang Meetup Amsterdam
- author of *go-restful*, *parzello*, *gmig*, *proto*, *forest*, *zazkia*, ...
- Google Developer Expert

.image img/emicklei_hackers_logo.png _ 300
* Simplified architecture

.image img/overview.png 500 700
* GraphQL

From graphql.org

- a query language for your API
- provides a complete and understandable description of the data in your AP
- gives clients the power to ask for exactly what they need 

Special types

- Query
- Mutation
* GraphQL Query Request

POST http://myserver/graphql

.code query.txt

which returns

.code result.json
* GraphQL Schema (extract)

.code schema.graphql
* Server Development approach

- Schema first design
- Frontend teams write queries, mutations and types
- Generate from schema
- Handcode the resolvers*
- Use open-source Go package(s) where possible

*Resolver* is a function that returns the data for a for given GraphQL operation or data field.

* Selecting a Go package

.image img/go-search.png 600 600
* Selecting an open-source package

- Does it fit the development approach ?
- How is it rated ? ( Github stars)
- What do Stackoverflowers say ?
- When was the last commit ?
- How many forks do exist ?
- Does it come with examples ?
- How is the Godoc ?
- Is there a continuous build button ?
- Does it bring in lots of dependent packages ?
- Is it trying to be all-inclusive solution ?
- Semantic version please ?
- Open issues count ?
* Generating code from schema

- Schema first design
- Generate code that uses *graphql-go* types to recreate schema in Go

But

- graphql-go promotes a Go *code* *first* approach

.image img/compiler.png 200 800
* graphql-go example

To implement this schema

.code graphql-schema.txt

One has to write

.code graphql-go.txt



* Generating code from schema (2)

- Looking for a GraphQL compiler
- Found 2 packages

    https://github.com/99designs/gqlgen

    https://github.com/gqlc
* 99designs/gqlgen

- Generates Go code for the types (models_gen.go) *without* dependencies

.code types.txt

- Generates Go code for creating the schema that uses its *own* types  (schema.go)
* gqlc

- Generates Go code that create the schema objects using *graphql-go* package

.code schema.txt

- Does *not* generate Go code for the defined types in the schema
- Manually write and inject our Resolve function (TODO)
* Choosing the GraphQL compiler

We use both! (for now)

- Use *gqlc* for schema code generation
- Use *gqlgen* for model code generation

And

- Github Issue with the request to add model generation to *gqcl*
- Injecting Resolver funcs
* GraphQL Query Request

POST http://myserver/graphql

.code query.txt

which returns

.code result.json
* Resolving an operation




- Operation is either part of a Query or Mutation

    // register the resolver
    //
    schema.QueryType.Fields()["quotations"].Resolve = ResolveQuotations


    // ResolveQuotations implements a GraphQL resolver function.
    //
    func ResolveQuotations(p graphql.ResolveParams) (interface{}, error) {
        //
        // .. call external services
        //
        return []Quotation{}, nil
    }

- Use the *ResolveParms* to access any input parameters
* Show me the code

Switching to the code repository....
